unit ufrmOrdemApontamento;

interface

uses
Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Datasnap.DBClient, Vcl.Grids,
  Vcl.DBGrids, System.JSON, IPPeerClient, REST.Client,
  REST.Authenticator.Simple, Data.Bind.Components, Data.Bind.ObjectScope,
  REST.Response.Adapter, Datasnap.DSClientRest, REST.Authenticator.Basic,
  Vcl.ExtCtrls, JvExExtCtrls, JvExtComponent, JvPanel, JvExForms, JvScrollBox,
  JvExControls, JvLabel, DBXJSON, DBXJSONReflect, Vcl.DBCGrids, Vcl.StdCtrls,
  Vcl.Mask, Vcl.DBCtrls, Vcl.ComCtrls, Vcl.WinXPickers;

type
  TfrmOrdemApontamento = class(TForm)
    GroupBox1: TGroupBox;
    Label13: TLabel;
    edMAQ_IN_CODIGO: TEdit;
    edMAQ_ST_NOME: TEdit;
    Label1: TLabel;
    edCMAQ_IN_CODIGO: TEdit;
    edCMAQ_ST_DESCRICAO: TEdit;
    edAPT_RE_TEMPOINICIAL: TTimePicker;
    edAPT_DT_APONTAMENTO: TDatePicker;
    Label2: TLabel;
    Label3: TLabel;
    lbAPT_RE_QUANTIDADE: TLabel;
    edAPT_RE_QUANTIDADE: TEdit;
    edAPT_RE_TEMPOFINAL: TTimePicker;
    edAPT_DT_ENCERRAMENTO: TDatePicker;
    lbAPT_DT_ENCERRAMENTO: TLabel;
    lbAPT_RE_TEMPOFINAL: TLabel;
    lbAPT_RE_QUANTIDADEREF: TLabel;
    edAPT_RE_QUANTIDADEREF: TEdit;
    lbAPT_REF_IN_CODIGO_INT: TLabel;
    edAPT_REF_IN_CODIGO_INT: TEdit;
    edREF_ST_DESCRICAO: TEdit;
    Panel1: TPanel;
    Button1: TButton;
    boCancelar: TButton;
    Label9: TLabel;
    edORD_IN_CODIGO: TEdit;
    Label10: TLabel;
    edORD_ST_ALTERNATIVO: TEdit;
    Label12: TLabel;
    edPLF_IN_SQOPERACAO: TEdit;
    edOPR_IN_CODIGO: TEdit;
    Label11: TLabel;
    edOPR_ST_OPERACAO: TEdit;
    Label14: TLabel;
    edPRO_ST_ALTERNATIVO: TEdit;
    edPRO_ST_DESCRICAO: TEdit;
    Label7: TLabel;
    edOPD_ST_ALTERNATIVO: TEdit;
    edOPD_ST_DESCRICAO: TEdit;
    Label4: TLabel;
    Label5: TLabel;
    edAPT_IN_SEQUENCIA: TEdit;
    boAPT_REF_IN_CODIGO_INT: TButton;
    procedure boCancelarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure edORD_IN_CODIGOExit(Sender: TObject);
    procedure edPLF_IN_SQOPERACAOExit(Sender: TObject);
    procedure edCMAQ_IN_CODIGOExit(Sender: TObject);
    procedure edOPD_ST_ALTERNATIVOExit(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
  private
    procedure CarregaApontamentos;
    procedure PreparaCampos(pAcao : String);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmOrdemApontamento: TfrmOrdemApontamento;

implementation

{$R *.dfm}

uses uDM;

procedure TfrmOrdemApontamento.boCancelarClick(Sender: TObject);
begin
  Self.Close();
end;

procedure TfrmOrdemApontamento.edCMAQ_IN_CODIGOExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edCMAQ_ST_DESCRICAO.Text := '';

  if edCMAQ_IN_CODIGO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<parametros>');
  vParams.WriteString('<evento>p_cmaquina_lst</evento>');
  vParams.WriteString('<org_in_codigo>' + IntToStr(wORG_IN_CODIGO) + '</org_in_codigo>');
  vParams.WriteString('<ctr_in_codigo>' + edMAQ_IN_CODIGO.Text + ' </ctr_in_codigo>');
  vParams.WriteString('<cmaq_in_codigo>' + edCMAQ_IN_CODIGO.Text + ' </cmaq_in_codigo>');
  vParams.WriteString('</parametros>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
    Exit;

  edCMAQ_ST_DESCRICAO.Text := cds.FieldByName('CMAQ_ST_DESCRICAO').AsString;

  CarregaApontamentos();

end;

procedure TfrmOrdemApontamento.edOPD_ST_ALTERNATIVOExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edOPD_ST_DESCRICAO.Text := '';

  if edOPD_ST_ALTERNATIVO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<parametros>');
  vParams.WriteString('<evento>p_operador_lst</evento>');
  vParams.WriteString('<org_in_codigo>' + IntToStr(wORG_IN_CODIGO) + '</org_in_codigo>');
  vParams.WriteString('<opd_st_alternativo>' + edOPD_ST_ALTERNATIVO.Text + ' </opd_st_alternativo>');
  vParams.WriteString('</parametros>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
    Exit;

  edOPD_ST_DESCRICAO.Text := cds.FieldByName('OPD_ST_DESCRICAO').AsString;

  CarregaApontamentos();

end;

procedure TfrmOrdemApontamento.edORD_IN_CODIGOExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edPRO_ST_DESCRICAO.Text := '';
  edPRO_ST_ALTERNATIVO.Text := '';
  edORD_ST_ALTERNATIVO.Text := '';

  if edORD_IN_CODIGO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<parametros>');
  vParams.WriteString('<evento>p_ordem_lst</evento>');
  vParams.WriteString('<org_in_codigo>' + IntToStr(wORG_IN_CODIGO) + '</org_in_codigo>');
  vParams.WriteString('<ord_in_codigo>' + edORD_IN_CODIGO.Text + ' </ord_in_codigo>');
  vParams.WriteString('</parametros>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
    Exit;

  edPRO_ST_DESCRICAO.Text := cds.FieldByName('PRO_ST_DESCRICAO').AsString;
  edPRO_ST_ALTERNATIVO.Text := cds.FieldByName('PRO_ST_ALTERNATIVO').AsString;
  edORD_ST_ALTERNATIVO.Text := cds.FieldByName('ORD_ST_ALTERNATIVO').AsString;

end;

procedure TfrmOrdemApontamento.edPLF_IN_SQOPERACAOExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edOPR_IN_CODIGO.Text := '';
  edOPR_ST_OPERACAO.Text := '';

  if edPLF_IN_SQOPERACAO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<parametros>');
  vParams.WriteString('<evento>P_OPERACAO_LST</evento>');
  vParams.WriteString('<org_in_codigo>' + IntToStr(wORG_IN_CODIGO) + '</org_in_codigo>');
  vParams.WriteString('<PLF_IN_SQOPERACAO>' + edPLF_IN_SQOPERACAO.Text + ' </PLF_IN_SQOPERACAO>');
  vParams.WriteString('</parametros>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
    Exit;

  edOPR_IN_CODIGO.Text := cds.FieldByName('OPR_IN_CODIGO').AsString;
  edOPR_ST_OPERACAO.Text := cds.FieldByName('OPR_ST_OPERACAO').AsString;
  edMAQ_IN_CODIGO.Text := cds.FieldByName('MAQ_IN_CODIGO').AsString;
  edMAQ_ST_NOME.Text := cds.FieldByName('MAQ_ST_NOME').AsString;

end;
procedure TfrmOrdemApontamento.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin

  TForm(Self.Owner).WindowState := wsNormal;
  FreeAndNil(frmOrdemApontamento);

end;

procedure TfrmOrdemApontamento.FormKeyPress(Sender: TObject; var Key: Char);
begin

  if Key = #13 then
  begin
    Key := #0;
    Perform(WM_NEXTDLGCTL, 0, 0);
  end;


end;

procedure TfrmOrdemApontamento.FormShow(Sender: TObject);
begin
  TForm(Self.Owner).WindowState := wsMinimized;
  //Self.BringToFront;
  PreparaCampos('A');
end;

procedure TfrmOrdemApontamento.Button1Click(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edOPR_IN_CODIGO.Text := '';
  edOPR_ST_OPERACAO.Text := '';

  if edPLF_IN_SQOPERACAO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<PARAMETROS>');
  vParams.WriteString('<EVENTO>P_APONTAMENTO_EXE</EVENTO>');
  vParams.WriteString('<ORG_IN_CODIGO>' + IntToStr(wORG_IN_CODIGO) + '</ORG_IN_CODIGO>');
  vParams.WriteString('<FIL_IN_CODIGO>' + IntToStr(wFIL_IN_CODIGO) + '</FIL_IN_CODIGO>');
  vParams.WriteString('<ORD_IN_CODIGO>' + edORD_IN_CODIGO.Text + '</ORD_IN_CODIGO>');
  vParams.WriteString('<PLF_IN_SQOPERACAO>' + edPLF_IN_SQOPERACAO.Text + '</PLF_IN_SQOPERACAO>');
  vParams.WriteString('<MAQ_IN_CODIGO>' + edMAQ_IN_CODIGO.Text + '</MAQ_IN_CODIGO>');
  vParams.WriteString('<CMAQ_IN_CODIGO>' + edCMAQ_IN_CODIGO.Text + '</CMAQ_IN_CODIGO>');
  vParams.WriteString('<OPD_ST_ALTERNATIVO>' + edOPD_ST_ALTERNATIVO.Text + '</OPD_ST_ALTERNATIVO>');
  vParams.WriteString('<APT_DT_APONTAMENTO>' + DateToStr(edAPT_DT_APONTAMENTO.Date) + '</APT_DT_APONTAMENTO>');
  vParams.WriteString('<APT_RE_TEMPOINICIAL>' + TimeToStr(edAPT_RE_TEMPOINICIAL.Time) + '</APT_RE_TEMPOINICIAL>');
  vParams.WriteString('<APT_DT_ENCERRAMENTO>' + DateToStr(edAPT_DT_ENCERRAMENTO.Date) + '</APT_DT_ENCERRAMENTO>');
  vParams.WriteString('<APT_RE_TEMPOFINAL>' + TimeToStr(edAPT_RE_TEMPOFINAL.Time) + '</APT_RE_TEMPOFINAL>');
  vParams.WriteString('<APT_RE_QUANTIDADE>' + edAPT_RE_QUANTIDADE.Text + '</APT_RE_QUANTIDADE>');
  vParams.WriteString('<APT_RE_QUANTIDADEREF>' + edAPT_RE_QUANTIDADEREF.Text  + '</APT_RE_QUANTIDADEREF>');
  vParams.WriteString('<APT_REF_IN_CODIGO>' + edAPT_REF_IN_CODIGO_INT.Text + '</APT_REF_IN_CODIGO>');
  vParams.WriteString('<APT_IN_SEQUENCIA>' + edAPT_IN_SEQUENCIA.Text + '</APT_IN_SEQUENCIA>');
  vParams.WriteString('</PARAMETROS>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  try
    if cds.FieldByName('CODIGO').AsInteger <> 0 then
      raise Exception.Create(cds.FieldByName('MENSAGEM').AsString);
  except
    on E: Exception do
      ShowMessage(E.Message);
  end;

  Self.Close;

end;

procedure TfrmOrdemApontamento.CarregaApontamentos;
var
  vParams : TStringStream;
  cds : TClientDataSet;
  vAcao : String;
begin

  if edORD_IN_CODIGO.Text = '' then
    Exit;

  if edPLF_IN_SQOPERACAO.Text = '' then
    Exit;

  if edMAQ_IN_CODIGO.Text = '' then
    Exit;

  if edCMAQ_IN_CODIGO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<PARAMETROS>');
  vParams.WriteString('<EVENTO>P_APONTAMENTO_LST</EVENTO>');
  vParams.WriteString('<ORG_IN_CODIGO>' + IntToStr(wORG_IN_CODIGO) + '</ORG_IN_CODIGO>');
  vParams.WriteString('<ORD_IN_CODIGO>' + edORD_IN_CODIGO.Text + '</ORD_IN_CODIGO>');
  vParams.WriteString('<PLF_IN_SQOPERACAO>' + edPLF_IN_SQOPERACAO.Text + '</PLF_IN_SQOPERACAO>');
  vParams.WriteString('<OPD_ST_ALTERNATIVO>' + edOPD_ST_ALTERNATIVO.Text + '</OPD_ST_ALTERNATIVO>');
  vParams.WriteString('<MAQ_IN_CODIGO>' + edMAQ_IN_CODIGO.Text + '</MAQ_IN_CODIGO>');
  vParams.WriteString('<CMAQ_IN_CODIGO>' + edCMAQ_IN_CODIGO.Text + '</CMAQ_IN_CODIGO>');
  vParams.WriteString('<APT_BO_ENCERRADO>N</APT_BO_ENCERRADO>');
  vParams.WriteString('</PARAMETROS>"');

  cds := DM.f_evento_lst(vParams);

  if not cds.Active then
  begin
    // Sem apontamento abertos, iniciar novo apontamento (A)
    vAcao := 'A';
  end
  else
  begin
    // Apontamento aberto, preprarar encerramento (E)
    vAcao := 'E';
    edAPT_IN_SEQUENCIA.Text    := cds.FieldByName('APT_IN_SEQUENCIA').AsString;
    edAPT_DT_APONTAMENTO.Date  := cds.FieldByName('APT_DT_APONTAMENTO').AsDateTime;
    edAPT_RE_TEMPOINICIAL.Time := StrToTime(cds.FieldByName('APT_HR_TEMPOINICIAL').AsString);
  end;

  PreparaCampos(vAcao);

end;

procedure TfrmOrdemApontamento.PreparaCampos(pAcao : String);
begin

  edAPT_DT_APONTAMENTO.Enabled    := DM.iif(pAcao = 'A', True    , False);
  edAPT_DT_APONTAMENTO.Color      := DM.iif(pAcao = 'A', clWindow, cl3DLight);
  edAPT_DT_APONTAMENTO.TabStop    := DM.iif(pAcao = 'A', True    , False);
  edAPT_DT_APONTAMENTO.Date       := DM.iif(pAcao = 'A', Now     , edAPT_DT_APONTAMENTO.Date);

  edAPT_RE_TEMPOINICIAL.Enabled   := DM.iif(pAcao = 'A', True    , False);
  edAPT_RE_TEMPOINICIAL.Color     := DM.iif(pAcao = 'A', clWindow, cl3DLight);
  edAPT_RE_TEMPOINICIAL.TabStop   := DM.iif(pAcao = 'A', True    , False);
  edAPT_RE_TEMPOINICIAL.Time      := DM.iif(pAcao = 'A', Now     , edAPT_RE_TEMPOINICIAL.Time);

  edAPT_DT_ENCERRAMENTO.Enabled   := DM.iif(pAcao = 'E', True    , False);
  edAPT_DT_ENCERRAMENTO.TabStop   := False;
  edAPT_DT_ENCERRAMENTO.Date      := Now;
  edAPT_DT_ENCERRAMENTO.Visible   := DM.iif(pAcao = 'E', True    , False);

  edAPT_RE_TEMPOFINAL.Enabled      := DM.iif(pAcao = 'E', True    , False);
  edAPT_RE_TEMPOFINAL.TabStop      := False;
  edAPT_RE_TEMPOFINAL.Time         := Now;
  edAPT_RE_TEMPOFINAL.Visible      := DM.iif(pAcao = 'E', True    , False);

  edAPT_RE_QUANTIDADE.Enabled      := DM.iif(pAcao = 'E', True    , False);
  edAPT_RE_QUANTIDADE.TabStop      := False;
  edAPT_RE_QUANTIDADE.Visible      := DM.iif(pAcao = 'E', True    , False);

  edAPT_RE_QUANTIDADEREF.Enabled   := DM.iif(pAcao = 'E', True    , False);
  edAPT_RE_QUANTIDADEREF.TabStop   := False;
  edAPT_RE_QUANTIDADEREF.Visible   := DM.iif(pAcao = 'E', True    , False);

  edAPT_REF_IN_CODIGO_INT.TabStop  := False;
  edAPT_REF_IN_CODIGO_INT.Visible  := DM.iif(pAcao = 'E', True    , False);

  edAPT_REF_IN_CODIGO_INT.Enabled  := DM.iif(pAcao = 'E', True    , False);
  edAPT_REF_IN_CODIGO_INT.TabStop  := False;
  edAPT_REF_IN_CODIGO_INT.Visible  := DM.iif(pAcao = 'E', True    , False);

  lbAPT_RE_QUANTIDADE.Visible := edAPT_RE_QUANTIDADE.Visible;
  lbAPT_RE_QUANTIDADEREF.Visible := edAPT_RE_QUANTIDADEREF.Visible;
  lbAPT_REF_IN_CODIGO_INT.Visible := edAPT_REF_IN_CODIGO_INT.Visible;
  edREF_ST_DESCRICAO.Visible := edAPT_REF_IN_CODIGO_INT.Visible;
  lbAPT_DT_ENCERRAMENTO.Visible := edAPT_DT_ENCERRAMENTO.Visible;
  lbAPT_RE_TEMPOFINAL.Visible := edAPT_RE_TEMPOFINAL.Visible;

end;

end.
