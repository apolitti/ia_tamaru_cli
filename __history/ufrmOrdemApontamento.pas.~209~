unit ufrmOrdemApontamento;

interface

uses
Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Datasnap.DBClient, Vcl.Grids,
  Vcl.DBGrids, System.JSON, IPPeerClient, REST.Client,
  REST.Authenticator.Simple, Data.Bind.Components, Data.Bind.ObjectScope,
  REST.Response.Adapter, Datasnap.DSClientRest, REST.Authenticator.Basic,
  Vcl.ExtCtrls, JvExExtCtrls, JvExtComponent, JvPanel, JvExForms, JvScrollBox,
  JvExControls, JvLabel, DBXJSON, DBXJSONReflect, Vcl.DBCGrids, Vcl.StdCtrls,
  Vcl.Mask, Vcl.DBCtrls, Vcl.ComCtrls, Vcl.WinXPickers;

type
  TfrmOrdemApontamento = class(TForm)
    GroupBox1: TGroupBox;
    Label13: TLabel;
    edMAQ_IN_CODIGO: TEdit;
    edMAQ_ST_NOME: TEdit;
    Label1: TLabel;
    edCMAQ_IN_CODIGO: TEdit;
    edCMAQ_ST_DESCRICAO: TEdit;
    lbAPT_DT_APONTAMENTO: TLabel;
    lbAPT_RE_TEMPOINICIAL: TLabel;
    lbAPT_RE_QUANTIDADE: TLabel;
    edAPT_RE_QUANTIDADE: TEdit;
    lbAPT_DT_ENCERRAMENTO: TLabel;
    lbAPT_RE_TEMPOFINAL: TLabel;
    lbAPT_RE_QUANTIDADEREF: TLabel;
    edAPT_RE_QUANTIDADEREF: TEdit;
    lbAPT_REF_IN_CODIGO_INT: TLabel;
    edAPT_REF_IN_CODIGO_INT: TEdit;
    edREF_ST_DESCRICAO: TEdit;
    Panel1: TPanel;
    boConfirmar: TButton;
    boCancelar: TButton;
    Label9: TLabel;
    edORD_IN_CODIGO: TEdit;
    Label10: TLabel;
    edORD_ST_ALTERNATIVO: TEdit;
    Label12: TLabel;
    edPLF_IN_SQOPERACAO: TEdit;
    edOPR_IN_CODIGO: TEdit;
    Label11: TLabel;
    edOPR_ST_OPERACAO: TEdit;
    Label14: TLabel;
    edPRO_ST_ALTERNATIVO: TEdit;
    edPRO_ST_DESCRICAO: TEdit;
    Label7: TLabel;
    edOPD_ST_ALTERNATIVO: TEdit;
    edOPD_ST_DESCRICAO: TEdit;
    Label4: TLabel;
    Label5: TLabel;
    edAPT_IN_SEQUENCIA: TEdit;
    boAPT_REF_IN_CODIGO_INT: TButton;
    boCMAQ_IN_CODIGO: TButton;
    Label2: TLabel;
    edORD_IN_CODIGO_PAI: TEdit;
    edAPT_CH_STATUS: TCheckBox;
    edAPT_DT_APONTAMENTO: TMaskEdit;
    edAPT_RE_TEMPOINICIAL: TMaskEdit;
    edAPT_DT_ENCERRAMENTO: TMaskEdit;
    edAPT_RE_TEMPOFINAL: TMaskEdit;
    Label3: TLabel;
    edPOD_RE_QTDE_SALDO: TEdit;
    edPOD_BO_VALIDA_SALDO: TEdit;
    procedure boCancelarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure edORD_IN_CODIGOExit(Sender: TObject);
    procedure edPLF_IN_SQOPERACAOExit(Sender: TObject);
    procedure edCMAQ_IN_CODIGOExit(Sender: TObject);
    procedure edOPD_ST_ALTERNATIVOExit(Sender: TObject);
    procedure boConfirmarClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure boAPT_REF_IN_CODIGO_INTClick(Sender: TObject);
    procedure boCMAQ_IN_CODIGOClick(Sender: TObject);
    procedure edAPT_REF_IN_CODIGO_INTExit(Sender: TObject);
    procedure edAPT_RE_QUANTIDADEExit(Sender: TObject);
    procedure edAPT_RE_QUANTIDADEREFExit(Sender: TObject);
  private
    vOwnerWindowState       : TWindowState;
    vOPR_BO_EDTTEMPOINICIAL : String;
    vOPR_BO_EDTTEMPOFINAL   : String;
    vOPR_BO_APTELEUNICO     : String;
    procedure CarregaApontamentos;
    procedure PreparaCampos(pAcao : String);
    procedure ValidarQuantidadeSaldo(Sender : TObject);
    procedure CarregarOrdemOperacao;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmOrdemApontamento: TfrmOrdemApontamento;

implementation

{$R *.dfm}

uses uDM, ufrmOrdemOperadorApontamentos, ufrmConsultaGrid, ufrmFollowup;

procedure TfrmOrdemApontamento.boAPT_REF_IN_CODIGO_INTClick(Sender: TObject);
begin

  frmConsultaGrid := TFrmConsultaGrid.Create(Self);
  frmConsultaGrid.vEvento := 'P_REFUGO_LST';
  if (frmConsultaGrid.ShowModal = mrOk) then
  begin
    edAPT_REF_IN_CODIGO_INT.Text := frmConsultaGrid.vValorRetorno;
    edREF_ST_DESCRICAO.Text := frmConsultaGrid.cdsConsulta.FieldByName('REF_ST_NOME').AsString;
    FreeAndNil(frmConsultaGrid);
  end;

end;

procedure TfrmOrdemApontamento.boCancelarClick(Sender: TObject);
begin
  Self.Close();
end;

procedure TfrmOrdemApontamento.boCMAQ_IN_CODIGOClick(Sender: TObject);
begin

  frmConsultaGrid := TFrmConsultaGrid.Create(Self);
  frmConsultaGrid.vEvento := 'P_CMAQUINA_LST';
  frmConsultaGrid.vCTR_IN_CODIGO := edMAQ_IN_CODIGO.Text;
  if (frmConsultaGrid.ShowModal = mrOk) then
  begin
    edCMAQ_IN_CODIGO.Text := frmConsultaGrid.vValorRetorno;
    edCMAQ_ST_DESCRICAO.Text := frmConsultaGrid.cdsConsulta.FieldByName('CMAQ_ST_DESCRICAO').AsString;
    FreeAndNil(frmConsultaGrid);
  end;

end;

procedure TfrmOrdemApontamento.edAPT_REF_IN_CODIGO_INTExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edREF_ST_DESCRICAO.Text := '';

  if edAPT_REF_IN_CODIGO_INT.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<parametros>');
  vParams.WriteString('<evento>P_REFUGO_LST</evento>');
  vParams.WriteString('<org_in_codigo>' + IntToStr(wORG_IN_CODIGO) + '</org_in_codigo>');
  vParams.WriteString('<REF_IN_CODIGO>' + edAPT_REF_IN_CODIGO_INT.Text + ' </REF_IN_CODIGO>');
  vParams.WriteString('</parametros>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
  begin
    edAPT_REF_IN_CODIGO_INT.Text := '';
    edREF_ST_DESCRICAO.Text := '';
    MessageBox(handle,'Código do motivo não cadastrado.','Atenção:', MB_OK or MB_ICONERROR);
    edAPT_REF_IN_CODIGO_INT.SetFocus;
    Exit;
  end;

  edREF_ST_DESCRICAO.Text := cds.FieldByName('REF_ST_NOME').AsString;
end;

procedure TfrmOrdemApontamento.edAPT_RE_QUANTIDADEExit(Sender: TObject);
begin

  ValidarQuantidadeSaldo(Sender);

end;

procedure TfrmOrdemApontamento.edAPT_RE_QUANTIDADEREFExit(Sender: TObject);
begin
  ValidarQuantidadeSaldo(Sender);
end;

procedure TfrmOrdemApontamento.edCMAQ_IN_CODIGOExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edCMAQ_ST_DESCRICAO.Text := '';

  if edCMAQ_IN_CODIGO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<parametros>');
  vParams.WriteString('<evento>p_cmaquina_lst</evento>');
  vParams.WriteString('<org_in_codigo>' + IntToStr(wORG_IN_CODIGO) + '</org_in_codigo>');
  vParams.WriteString('<ctr_in_codigo>' + edMAQ_IN_CODIGO.Text + ' </ctr_in_codigo>');
  vParams.WriteString('<cmaq_in_codigo>' + edCMAQ_IN_CODIGO.Text + ' </cmaq_in_codigo>');
  vParams.WriteString('</parametros>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
  begin
    edCMAQ_IN_CODIGO.Text := '';
    edCMAQ_ST_DESCRICAO.Text := '';
    MessageBox(handle,'Código da maquina não cadastrado.','Atenção:', MB_OK or MB_ICONERROR);
    edCMAQ_IN_CODIGO.SetFocus;
    Exit;
  end;

  edCMAQ_ST_DESCRICAO.Text := cds.FieldByName('CMAQ_ST_DESCRICAO').AsString;

  CarregaApontamentos();

end;

procedure TfrmOrdemApontamento.edOPD_ST_ALTERNATIVOExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edOPD_ST_DESCRICAO.Text := '';

  if edOPD_ST_ALTERNATIVO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<parametros>');
  vParams.WriteString('<evento>p_operador_lst</evento>');
  vParams.WriteString('<org_in_codigo>' + IntToStr(wORG_IN_CODIGO) + '</org_in_codigo>');
  vParams.WriteString('<opd_st_alternativo>' + edOPD_ST_ALTERNATIVO.Text + ' </opd_st_alternativo>');
  vParams.WriteString('</parametros>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
  begin
    edOPD_ST_ALTERNATIVO.Text := '';
    edOPD_ST_DESCRICAO.Text := '';
    MessageBox(handle,'Código do operador não cadastrado.','Atenção:', MB_OK or MB_ICONERROR);
    edOPD_ST_ALTERNATIVO.SetFocus;
    Exit;
  end;

  edOPD_ST_DESCRICAO.Text := cds.FieldByName('OPD_ST_DESCRICAO').AsString;

  CarregaApontamentos();

  if edAPT_DT_APONTAMENTO.CanFocus then
    edAPT_DT_APONTAMENTO.SetFocus
  else if edAPT_RE_TEMPOINICIAL.CanFocus then
    edAPT_RE_TEMPOINICIAL.SetFocus
  else if edAPT_DT_ENCERRAMENTO.CanFocus then
    edAPT_DT_ENCERRAMENTO.SetFocus
  else if edAPT_RE_TEMPOFINAL.CanFocus then
    edAPT_RE_TEMPOFINAL.SetFocus
  else if edAPT_RE_QUANTIDADE.CanFocus then
    edAPT_RE_QUANTIDADE.SetFocus;

end;

procedure TfrmOrdemApontamento.edORD_IN_CODIGOExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edPRO_ST_DESCRICAO.Text := '';
  edPRO_ST_ALTERNATIVO.Text := '';
  edORD_ST_ALTERNATIVO.Text := '';

  if edORD_IN_CODIGO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<parametros>');
  vParams.WriteString('<evento>p_ordem_lst</evento>');
  vParams.WriteString('<org_in_codigo>' + IntToStr(wORG_IN_CODIGO) + '</org_in_codigo>');
  vParams.WriteString('<ord_in_codigo>' + edORD_IN_CODIGO.Text + ' </ord_in_codigo>');
  vParams.WriteString('</parametros>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
    Exit;

  edPRO_ST_DESCRICAO.Text   := cds.FieldByName('PRO_ST_DESCRICAO').AsString;
  edPRO_ST_ALTERNATIVO.Text := cds.FieldByName('PRO_ST_ALTERNATIVO').AsString;
  edORD_ST_ALTERNATIVO.Text := cds.FieldByName('ORD_ST_ALTERNATIVO').AsString;
  edORD_IN_CODIGO_PAI.Text  := cds.FieldByName('ORD_IN_CODIGO_PAI').AsString;

end;

procedure TfrmOrdemApontamento.edPLF_IN_SQOPERACAOExit(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edOPR_IN_CODIGO.Text := '';
  edOPR_ST_OPERACAO.Text := '';

  if edPLF_IN_SQOPERACAO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<PARAMETROS>');
  vParams.WriteString('<EVENTO>P_OPERACAO_LST</EVENTO>');
  vParams.WriteString('<ORG_IN_CODIGO>' + IntToStr(wORG_IN_CODIGO) + '</ORG_IN_CODIGO>');
  vParams.WriteString('<FIL_IN_CODIGO>' + IntToStr(wFIL_IN_CODIGO) + '</FIL_IN_CODIGO>');
  vParams.WriteString('<ORD_IN_CODIGO>' + edORD_IN_CODIGO.Text + '</ORD_IN_CODIGO>');
  vParams.WriteString('<PLF_IN_SQOPERACAO>' + edPLF_IN_SQOPERACAO.Text + ' </PLF_IN_SQOPERACAO>');
  vParams.WriteString('</PARAMETROS>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if cds.IsEmpty then
    Exit;

  edOPR_IN_CODIGO.Text := cds.FieldByName('OPR_IN_CODIGO').AsString;
  edOPR_ST_OPERACAO.Text := cds.FieldByName('OPR_ST_OPERACAO').AsString;
  edMAQ_IN_CODIGO.Text := cds.FieldByName('MAQ_IN_CODIGO').AsString;
  edMAQ_ST_NOME.Text := cds.FieldByName('MAQ_ST_NOME').AsString;

  edAPT_DT_APONTAMENTO.Enabled := DM.iif(cds.FieldByName('OPR_BO_EDTTEMPOINICIAL').AsString = 'S', True, False);
  edAPT_DT_APONTAMENTO.Visible := edAPT_DT_APONTAMENTO.Enabled;

  edAPT_DT_ENCERRAMENTO.Enabled := DM.iif(cds.FieldByName('OPR_BO_EDTTEMPOFINAL').AsString = 'S', True, False);
  edAPT_DT_ENCERRAMENTO.Visible := edAPT_DT_ENCERRAMENTO.Enabled;

  vOPR_BO_EDTTEMPOINICIAL  := cds.FieldByName('OPR_BO_EDTTEMPOINICIAL').AsString;
  vOPR_BO_EDTTEMPOFINAL    := cds.FieldByName('OPR_BO_EDTTEMPOFINAL').AsString;
  vOPR_BO_APTELEUNICO      := cds.FieldByName('OPR_BO_APTELEUNICO').AsString;


end;
procedure TfrmOrdemApontamento.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin

  TForm(Self.Owner).WindowState := vOwnerWindowState;

  if TForm(Self.Owner).Name = 'frmOrdemOperadorApontamentos' then
    frmOrdemOperadorApontamentos.CarregaApontamentos()
  else if TForm(Self.Owner).Name = 'frmFollowup' then
    frmFollowup.boFiltrarClick(frmFollowup.boFiltrar);

  FreeAndNil(frmOrdemApontamento);

end;

procedure TfrmOrdemApontamento.FormKeyPress(Sender: TObject; var Key: Char);
begin

  if Key = #13 then
  begin
    Key := #0;
    Perform(WM_NEXTDLGCTL, 0, 0);
  end;


end;

procedure TfrmOrdemApontamento.FormShow(Sender: TObject);
begin
  vOwnerWindowState := TForm(Self.Owner).WindowState;
  TForm(Self.Owner).WindowState := wsMinimized;
  //Self.BringToFront;
  PreparaCampos('X');

  if edORD_IN_CODIGO.Text = '' then
    edORD_IN_CODIGO.SetFocus
  else if edPLF_IN_SQOPERACAO.Text = '' then
    edPLF_IN_SQOPERACAO.SetFocus
  else if edCMAQ_IN_CODIGO.Text = '' then
    edCMAQ_IN_CODIGO.SetFocus
  else if edOPD_ST_ALTERNATIVO.Text = '' then
    edOPD_ST_ALTERNATIVO.SetFocus;

end;

procedure TfrmOrdemApontamento.boConfirmarClick(Sender: TObject);
var
  cds : TClientDataSet;
  vParams : TStringStream;
  vAPT_CH_STATUS : String;
begin

  vAPT_CH_STATUS := Dm.iif(edAPT_CH_STATUS.Checked, 'E', 'A');

  vParams := TStringStream.Create;
  vParams.WriteString('"<PARAMETROS>');
  vParams.WriteString('<EVENTO>P_APONTAMENTO_EXE</EVENTO>');
  vParams.WriteString('<ORG_IN_CODIGO>' + IntToStr(wORG_IN_CODIGO) + '</ORG_IN_CODIGO>');
  vParams.WriteString('<FIL_IN_CODIGO>' + IntToStr(wFIL_IN_CODIGO) + '</FIL_IN_CODIGO>');
  vParams.WriteString('<ORD_IN_CODIGO>' + edORD_IN_CODIGO.Text + '</ORD_IN_CODIGO>');
  vParams.WriteString('<PLF_IN_SQOPERACAO>' + edPLF_IN_SQOPERACAO.Text + '</PLF_IN_SQOPERACAO>');
  vParams.WriteString('<MAQ_IN_CODIGO>' + edMAQ_IN_CODIGO.Text + '</MAQ_IN_CODIGO>');
  vParams.WriteString('<CMAQ_IN_CODIGO>' + edCMAQ_IN_CODIGO.Text + '</CMAQ_IN_CODIGO>');
  vParams.WriteString('<OPD_ST_ALTERNATIVO>' + edOPD_ST_ALTERNATIVO.Text + '</OPD_ST_ALTERNATIVO>');
  vParams.WriteString('<APT_DT_APONTAMENTO>' + edAPT_DT_APONTAMENTO.Text + '</APT_DT_APONTAMENTO>');
  vParams.WriteString('<APT_RE_TEMPOINICIAL>' + edAPT_RE_TEMPOINICIAL.Text + '</APT_RE_TEMPOINICIAL>');
  vParams.WriteString('<APT_DT_ENCERRAMENTO>' + edAPT_DT_ENCERRAMENTO.Text + '</APT_DT_ENCERRAMENTO>');
  vParams.WriteString('<APT_RE_TEMPOFINAL>' + edAPT_RE_TEMPOFINAL.Text + '</APT_RE_TEMPOFINAL>');
  vParams.WriteString('<APT_RE_QUANTIDADE>' + edAPT_RE_QUANTIDADE.Text + '</APT_RE_QUANTIDADE>');
  vParams.WriteString('<APT_RE_QUANTIDADEREF>' + edAPT_RE_QUANTIDADEREF.Text  + '</APT_RE_QUANTIDADEREF>');
  vParams.WriteString('<APT_REF_IN_CODIGO>' + edAPT_REF_IN_CODIGO_INT.Text + '</APT_REF_IN_CODIGO>');
  vParams.WriteString('<APT_IN_SEQUENCIA>' + edAPT_IN_SEQUENCIA.Text + '</APT_IN_SEQUENCIA>');
  vParams.WriteString('<APT_CH_STATUS>' + vAPT_CH_STATUS + '</APT_CH_STATUS>');
  vParams.WriteString('</PARAMETROS>"');

  try

    cds := TClientDataSet.Create(Self);
    cds := DM.f_evento_lst(vParams);

    if cds.FieldByName('CODIGO').AsInteger <> 0 then
      raise Exception.Create(cds.FieldByName('MENSAGEM').AsString);

    Self.Close;

  except
    on E: Exception do
      MessageBox(handle, PChar(E.Message) ,'Atenção:', MB_OK or MB_ICONERROR);
  end;

end;

procedure TfrmOrdemApontamento.CarregaApontamentos;
var
  vParams : TStringStream;
  cds : TClientDataSet;
  vAcao : String;
begin

  if edORD_IN_CODIGO.Text = '' then
    Exit;

  if edPLF_IN_SQOPERACAO.Text = '' then
    Exit;

  if edMAQ_IN_CODIGO.Text = '' then
    Exit;

  if edCMAQ_IN_CODIGO.Text = '' then
    Exit;

  if edOPD_ST_ALTERNATIVO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<PARAMETROS>');
  vParams.WriteString('<EVENTO>P_APONTAMENTO_LST</EVENTO>');
  vParams.WriteString('<ORG_IN_CODIGO>' + IntToStr(wORG_IN_CODIGO) + '</ORG_IN_CODIGO>');
  vParams.WriteString('<ORD_IN_CODIGO>' + edORD_IN_CODIGO.Text + '</ORD_IN_CODIGO>');
  vParams.WriteString('<PLF_IN_SQOPERACAO>' + edPLF_IN_SQOPERACAO.Text + '</PLF_IN_SQOPERACAO>');
  vParams.WriteString('<OPD_ST_ALTERNATIVO>' + edOPD_ST_ALTERNATIVO.Text + '</OPD_ST_ALTERNATIVO>');
  vParams.WriteString('<MAQ_IN_CODIGO>' + edMAQ_IN_CODIGO.Text + '</MAQ_IN_CODIGO>');
  vParams.WriteString('<CMAQ_IN_CODIGO>' + edCMAQ_IN_CODIGO.Text + '</CMAQ_IN_CODIGO>');
  vParams.WriteString('<APT_BO_ENCERRADO>N</APT_BO_ENCERRADO>');
  vParams.WriteString('</PARAMETROS>"');

  cds := DM.f_evento_lst(vParams);

  if not cds.Active then
  begin
    // Sem apontamento abertos, iniciar novo apontamento (A)
    vAcao := 'A';
    edAPT_CH_STATUS.Enabled := False;

    // Preenche as datas do apontamento
    edAPT_DT_APONTAMENTO.Text  := FormatDateTime('dd/mm/yyyy' , Now);
    edAPT_RE_TEMPOINICIAL.Text := FormatDateTime('hh:nn' , Now);
    edAPT_DT_ENCERRAMENTO.Text := FormatDateTime('dd/mm/yyyy' , Now);
    edAPT_RE_TEMPOFINAL.Text   := FormatDateTime('hh:nn' , Now);

  end
  else
  begin
    // Apontamento aberto, preprarar encerramento (E)
    vAcao := 'E';
    edAPT_CH_STATUS.Enabled := True;

    edAPT_IN_SEQUENCIA.Text    := cds.FieldByName('APT_IN_SEQUENCIA').AsString;
    edAPT_DT_APONTAMENTO.Text  := cds.FieldByName('APT_DT_APONTAMENTO').AsString;
    edAPT_RE_TEMPOINICIAL.Text := cds.FieldByName('APT_HR_TEMPOINICIAL').AsString;

    edAPT_RE_QUANTIDADE.Text := cds.FieldByName('APT_RE_QUANTIDADE').AsString;
    edAPT_RE_QUANTIDADEREF.Text := cds.FieldByName('APT_RE_QUANTIDADEREF').AsString;
    edAPT_REF_IN_CODIGO_INT.Text := DM.iif(cds.FieldByName('APT_REF_IN_CODIGO').AsString = '0', '', cds.FieldByName('APT_REF_IN_CODIGO').AsString);
    edAPT_REF_IN_CODIGO_INTExit(edAPT_REF_IN_CODIGO_INT);

    // Preenche as datas do apontamento
    edAPT_DT_ENCERRAMENTO.Text := FormatDateTime('dd/mm/yyyy' , Now);
    edAPT_RE_TEMPOFINAL.Text   := FormatDateTime('hh:nn' , Now);

  end;

  PreparaCampos(vAcao);

end;

procedure TfrmOrdemApontamento.PreparaCampos(pAcao : String);
begin

  edAPT_CH_STATUS.Enabled := False;

  if ((pAcao = 'A') or (pAcao = 'E')) then
  begin

    if vOPR_BO_APTELEUNICO = 'S' then
    begin
      edAPT_CH_STATUS.Enabled       := True;
      edAPT_CH_STATUS.Checked       := True;

      edAPT_DT_APONTAMENTO.Visible  := True;
      edAPT_RE_TEMPOINICIAL.Visible := True;
      edAPT_DT_ENCERRAMENTO.Visible := True;
      edAPT_RE_TEMPOFINAL.Visible   := True;

      edAPT_DT_APONTAMENTO.Enabled  := DM.iif(vOPR_BO_EDTTEMPOINICIAL = 'S', True, False);
      edAPT_RE_TEMPOINICIAL.Enabled := DM.iif(vOPR_BO_EDTTEMPOINICIAL = 'S', True, False);

      edAPT_DT_ENCERRAMENTO.Enabled := DM.iif(vOPR_BO_EDTTEMPOFINAL = 'S', True, False);
      edAPT_RE_TEMPOFINAL.Enabled   := DM.iif(vOPR_BO_EDTTEMPOFINAL = 'S', True, False);

      edAPT_RE_QUANTIDADE.Visible     := True;
      edAPT_RE_QUANTIDADE.Enabled     := True;

      edAPT_RE_QUANTIDADEREF.Visible  := True;
      edAPT_RE_QUANTIDADEREF.Enabled  := True;

      edAPT_REF_IN_CODIGO_INT.Visible := True;
      edAPT_REF_IN_CODIGO_INT.Enabled := True;

      boAPT_REF_IN_CODIGO_INT.Visible := True;
      boAPT_REF_IN_CODIGO_INT.Enabled := True;

    end
    else
    begin

      // Verifica se é Abertura
      if pAcao = 'A' then
      begin
        // Abertura
        edAPT_CH_STATUS.Enabled       := False;
        edAPT_CH_STATUS.Checked       := False;

        edAPT_DT_APONTAMENTO.Visible  := True;
        edAPT_RE_TEMPOINICIAL.Visible := True;
        edAPT_DT_APONTAMENTO.Enabled  := DM.iif(vOPR_BO_EDTTEMPOINICIAL = 'S', True, False);
        edAPT_RE_TEMPOINICIAL.Enabled := DM.iif(vOPR_BO_EDTTEMPOINICIAL = 'S', True, False);

        edAPT_DT_ENCERRAMENTO.Visible := False;
        edAPT_DT_ENCERRAMENTO.Enabled := False;

        edAPT_RE_TEMPOFINAL.Visible     := False;
        edAPT_RE_TEMPOFINAL.Enabled     := False;

        edAPT_RE_QUANTIDADE.Visible     := False;
        edAPT_RE_QUANTIDADE.Enabled     := False;

        edAPT_RE_QUANTIDADEREF.Visible  := False;
        edAPT_RE_QUANTIDADEREF.Enabled  := False;

        edAPT_REF_IN_CODIGO_INT.Visible := False;
        edAPT_REF_IN_CODIGO_INT.Visible := False;

        boAPT_REF_IN_CODIGO_INT.Visible := False;
        boAPT_REF_IN_CODIGO_INT.Visible := False;

      end
      else
      begin
        // Encerramento
        edAPT_CH_STATUS.Enabled       := True;
        edAPT_CH_STATUS.Checked       := True;

        edAPT_DT_APONTAMENTO.Visible  := True;
        edAPT_DT_APONTAMENTO.Enabled  := False;
        edAPT_RE_TEMPOINICIAL.Visible := True;
        edAPT_RE_TEMPOINICIAL.Enabled := False;

        edAPT_DT_ENCERRAMENTO.Visible := True;
        edAPT_DT_ENCERRAMENTO.Enabled := DM.iif(vOPR_BO_EDTTEMPOFINAL = 'S', True, False);

        edAPT_RE_TEMPOFINAL.Visible   := True;
        edAPT_RE_TEMPOFINAL.Enabled   := DM.iif(vOPR_BO_EDTTEMPOFINAL = 'S', True, False);

        edAPT_RE_QUANTIDADE.Visible     := True;
        edAPT_RE_QUANTIDADE.Enabled     := True;

        edAPT_RE_QUANTIDADEREF.Visible  := True;
        edAPT_RE_QUANTIDADEREF.Enabled  := True;

        edAPT_REF_IN_CODIGO_INT.Visible := True;
        edAPT_REF_IN_CODIGO_INT.Enabled := True;

        boAPT_REF_IN_CODIGO_INT.Visible := True;
        boAPT_REF_IN_CODIGO_INT.Enabled := True;

      end;
    end;

    edAPT_DT_APONTAMENTO.Color       := DM.iif(edAPT_DT_APONTAMENTO.Enabled, clWindow, cl3DLight);
    edAPT_DT_APONTAMENTO.TabStop     := DM.iif(edAPT_DT_APONTAMENTO.Enabled, True    , False);

    edAPT_RE_TEMPOINICIAL.Color      := DM.iif(edAPT_RE_TEMPOINICIAL.Enabled, clWindow, cl3DLight);
    edAPT_RE_TEMPOINICIAL.TabStop    := DM.iif(edAPT_RE_TEMPOINICIAL.Enabled, True    , False);

    edAPT_DT_ENCERRAMENTO.Color      := DM.iif(edAPT_DT_APONTAMENTO.Enabled, clWindow, cl3DLight);
    edAPT_DT_ENCERRAMENTO.TabStop    := Dm.iif(edAPT_DT_ENCERRAMENTO.Enabled, True, False);

    edAPT_DT_ENCERRAMENTO.Color      := DM.iif(edAPT_RE_TEMPOFINAL.Enabled, clWindow, cl3DLight);
    edAPT_RE_TEMPOFINAL.TabStop      := DM.iif(edAPT_RE_TEMPOFINAL.Enabled, True    , False);;

    edAPT_RE_QUANTIDADE.Color        := DM.iif(edAPT_RE_QUANTIDADE.Enabled, clWindow, cl3DLight);
    edAPT_RE_QUANTIDADE.TabStop      := DM.iif(edAPT_RE_QUANTIDADE.Enabled, True    , False);

    edAPT_RE_QUANTIDADEREF.Color     := DM.iif(edAPT_RE_QUANTIDADEREF.Enabled, clWindow, cl3DLight);
    edAPT_RE_QUANTIDADEREF.TabStop   := DM.iif(edAPT_RE_QUANTIDADEREF.Enabled, True    , False);

    boAPT_REF_IN_CODIGO_INT.Enabled  := DM.iif(edAPT_REF_IN_CODIGO_INT.Enabled, True    , False);

    edAPT_REF_IN_CODIGO_INT.Color    := DM.iif(edAPT_REF_IN_CODIGO_INT.Enabled, clWindow, cl3DLight);
    edAPT_REF_IN_CODIGO_INT.TabStop  := DM.iif(edAPT_REF_IN_CODIGO_INT.Enabled, True    , False);

  end
  else
  begin
    edAPT_DT_APONTAMENTO.Visible    := False;
    edAPT_RE_TEMPOINICIAL.Visible   := False;
    edAPT_DT_ENCERRAMENTO.Visible   := False;
    edAPT_RE_TEMPOFINAL.Visible     := False;
    edAPT_RE_QUANTIDADE.Visible     := False;
    edAPT_RE_QUANTIDADEREF.Visible  := False;
    edAPT_REF_IN_CODIGO_INT.Visible := False;
    edAPT_REF_IN_CODIGO_INT.Visible := False;
    boAPT_REF_IN_CODIGO_INT.Visible := False;
    boAPT_REF_IN_CODIGO_INT.Visible := False;
  end;

  lbAPT_DT_APONTAMENTO.Visible     := edAPT_DT_APONTAMENTO.Visible;
  lbAPT_RE_TEMPOINICIAL.Visible    := edAPT_RE_TEMPOINICIAL.Visible;
  lbAPT_RE_QUANTIDADE.Visible      := edAPT_RE_QUANTIDADE.Visible;
  lbAPT_RE_QUANTIDADEREF.Visible   := edAPT_RE_QUANTIDADEREF.Visible;
  lbAPT_REF_IN_CODIGO_INT.Visible  := edAPT_REF_IN_CODIGO_INT.Visible;
  edREF_ST_DESCRICAO.Visible       := edAPT_REF_IN_CODIGO_INT.Visible;
  lbAPT_DT_ENCERRAMENTO.Visible    := edAPT_DT_ENCERRAMENTO.Visible;
  lbAPT_RE_TEMPOFINAL.Visible      := edAPT_RE_TEMPOFINAL.Visible;

end;

procedure TfrmOrdemApontamento.ValidarQuantidadeSaldo(Sender : TObject);
var
  vQuantidade : Double;
  vRefugo : Double;
begin

  if edPOD_BO_VALIDA_SALDO.Text = 'N' then
    Exit;

  try
    vQuantidade := StrToFloat(edAPT_RE_QUANTIDADE.Text);
  except
    vQuantidade := 0;
  end;

  try
    vRefugo := StrToFloat(edAPT_RE_QUANTIDADEREF.Text);
  except
    vRefugo := 0;
  end;

  if (vQuantidade + vRefugo) <= StrToFloat(edPOD_RE_QTDE_SALDO.Text) then
    Exit;

  MessageBox(handle,'Soma das quantidades produzida e refugo superior ao saldo da operação.','Atenção:', MB_OK or MB_ICONERROR);
  TEdit(Sender).Text := '0';
  TEdit(Sender).SetFocus;

end;

procedure TfrmOrdemApontamento.CarregarOrdemOperacao;
var
  cds : TClientDataSet;
  vParams : TStringStream;
begin

  edPOD_RE_QTDE_SALDO.Text := '0';
  edPOD_BO_VALIDA_SALDO.Text := 'N';

  if edORD_IN_CODIGO.Text = '' then
    Exit;

  if edPLF_IN_SQOPERACAO.Text = '' then
    Exit;

  vParams := TStringStream.Create;
  vParams.WriteString('"<PARAMETROS>');
  vParams.WriteString('<EVENTO>P_ORDEM_OPERACAO_LST</EVENTO>');
  vParams.WriteString('<ORG_IN_CODIGO>' + IntToStr(wORG_IN_CODIGO) + '</ORG_IN_CODIGO>');
  vParams.WriteString('<ORD_IN_CODIGO>' + edORD_IN_CODIGO.Text + ' </ORD_IN_CODIGO>');
  vParams.WriteString('<PLF_IN_SQOPERACAO>' + edPLF_IN_SQOPERACAO.Text + ' </PLF_IN_SQOPERACAO>');
  vParams.WriteString('</PARAMETROS>"');

  cds := TClientDataSet.Create(Self);
  cds := DM.f_evento_lst(vParams);

  if ((not cds.Active) or (cds.IsEmpty)) then
  begin
    Exit;
  end;

  edPOD_RE_QTDE_SALDO.Text := cds.FieldByName('POD_RE_QTDE_SALDO').AsString;
  edPOD_BO_VALIDA_SALDO.Text := cds.FieldByName('POD_RE_QTDE_SALDO').AsString;

end;

end.
